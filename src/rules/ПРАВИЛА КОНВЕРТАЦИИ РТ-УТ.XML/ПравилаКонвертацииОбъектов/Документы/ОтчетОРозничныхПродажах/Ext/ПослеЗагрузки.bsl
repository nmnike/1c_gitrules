

//нужные переменные
МетаданныеДокумента  = Объект.Метаданные();
ИскомоеПодразделение = Справочники.Подразделения.ПустаяСсылка();
ИскомаяКасса         = Справочники.Кассы.ПустаяСсылка();
ИскомыйСклад         = Справочники.Склады.ПустаяСсылка();
ИскомаяКассаККМ      = Справочники.КассыККМ.ПустаяСсылка();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

/// ШАПКА 

Выполнить(Алгоритмы.УстановитьВозможностьРедактированияОбъекта);

//получим нужные поля по коду магазина
ИмяПараметра = "КодМагазина";
Выполнить(Алгоритмы.ОпределитьПараметрыМагазина);

//общие реквизиты шапки
Выполнить(Алгоритмы.ОбработкаШапки);

Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;

//заполним склад и кассуККМ
Если Не ИскомыйСклад.Пустая() Тогда
	Объект.Склад    = ИскомыйСклад;
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) тогда 
		Объект.КассаККМ = ИскомаяКассаККМ;
	КонецЕсли;
КонецЕсли;

Если Не ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовЭквайрера) Тогда
	Объект.ДоговорВзаиморасчетовЭквайрера = Объект.ДоговорЭквайринга.ДоговорВзаиморасчетов;
КонецЕсли;

Если ТипЗнч(ПараметрыОбъекта["ОплатаПодарочнымиСертификатами"]) = Тип("Число") Тогда
	
	СуммаОплатыПодарочнымиСертификатами  = ПараметрыОбъекта["ОплатаПодарочнымиСертификатами"];
	
Иначе 
	
	СуммаОплатыПодарочнымиСертификатами = 0;
	
КонецЕсли;	


Объект.ПрочаяБезналичнаяОплата = СуммаОплатыПодарочнымиСертификатами;		
	


// Установка Склада для табличных частей
Для каждого СтрокаТЧ Из Объект.Товары Цикл
	СтрокаТЧ.Склад = ИскомыйСклад;
КонецЦикла;
Для каждого СтрокаТЧ Из Объект.СоставНабора Цикл
	СтрокаТЧ.Склад = ИскомыйСклад;
КонецЦикла;


/// ТАБЛИЧНАЯ ЧАСТЬ

//работа с табличными частями
ИмяТабличнойЧасти = "Товары";
ДокументОбъект = Объект;
Выполнить(Алгоритмы.ОбработкаТабличнойЧасти);

ИмяТабличнойЧасти = "СоставНабора";
ДокументОбъект = Объект;
Выполнить(Алгоритмы.ОбработкаТабличнойЧасти);

//заполним склад в табличной части тем же складом, который указан в шапке
Для Каждого СтрокаДокумента Из Объект.Товары Цикл
	СтрокаДокумента.Склад = Объект.Склад;
КонецЦикла;

//по банковским кредитам
Для Каждого СтрокаДокумента Из Объект.ОплатаБанковскимиКредитами Цикл
	СтрокаДокумента.ДоговорВзаиморасчетовБанкаКредитора = СтрокаДокумента.ВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
КонецЦикла;

// По дисконтным картам
ТаблицаПродажДК = Объект.ПродажиПоДисконтнымКартам.Выгрузить();
ТаблицаПродажДК.Свернуть("ДисконтнаяКарта, ВладелецДисконтнойКарты", "Сумма");
Объект.ПродажиПоДисконтнымКартам.Загрузить(ТаблицаПродажДК);

////////////////////////////////////////////////////////////////////////////////////////////////////////

//Создание документа "Приходный Кассовый Ордер


Если ТипЗнч(ПараметрыОбъекта["ОплатаПодарочнымиСертификатами"]) = Тип("Число") Тогда
	
	СуммаНаличнымиПоДокументу = Число(Объект.Товары.Итог("Сумма"))+?(Объект.СуммаВключаетНДС, 0, Объект.Товары.Итог("СуммаНДС")) - Объект.ОплатаПлатежнымиКартами.Итог("Сумма") - Объект.ОплатаБанковскимиКредитами.Итог("Сумма") - Объект.ПрочаяБезналичнаяОплата;
		
Иначе
	
	СуммаНаличнымиПоДокументу = Число(Объект.Товары.Итог("Сумма"))+?(Объект.СуммаВключаетНДС, 0, Объект.Товары.Итог("СуммаНДС")) - Объект.ОплатаПлатежнымиКартами.Итог("Сумма") - Объект.ОплатаБанковскимиКредитами.Итог("Сумма");
	
КонецЕсли;

ОтчетОРозничныхПродажахУИД = Новый УникальныйИдентификатор(ПараметрыОбъекта["УникальныйИдентификаторДокумента"]);

СсылкаНаДокументПКО        = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(ОтчетОРозничныхПродажахУИД);

Если Не СуммаНаличнымиПоДокументу = 0 Тогда
	
	Если Объект.Ссылка.Пустая() Или СсылкаНаДокументПКО.ПолучитьОбъект() = Неопределено Тогда
		НовыйПКО  = Истина;
		ОбъектПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		ОбъектПКО.УстановитьСсылкуНового(СсылкаНаДокументПКО);
	Иначе
		НовыйПКО  = Ложь;
		ОбъектПКО = СсылкаНаДокументПКО.ПолучитьОбъект();
	КонецЕсли;
	
	
	МетаданныеДокументаПКО = ОбъектПКО.Метаданные();
	
	Касса = ИскомаяКасса;
	Если Касса.Пустая() Тогда 
		Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяКасса");
	КонецЕсли;
	
	
	
	ОбъектПКО.Дата                          = Объект.Дата;
	ОбъектПКО.Контрагент                    = Объект.КассаККМ; //деньги получаем из кассы ККМ, из документа ОтчетККМ
	ОбъектПКО.Организация                   = Объект.Организация;
	ОбъектПКО.ДокументОснование             = Объект.Ссылка;
	ОбъектПКО.ВидОперации                   = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
	ОбъектПКО.ВидПриемаРозничнойВыручки     = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
	ОбъектПКО.ОтраженоВОперУчете            = Истина;
	ОбъектПКО.Оплачено                      = Истина;
	ОбъектПКО.ВалютаДокумента               = мВалютаРегламентированногоУчета;
	ОбъектПКО.СуммаДокумента                = СуммаНаличнымиПоДокументу;
	
	ОбъектПКО.ПометкаУдаления               = Объект.ПометкаУдаления;
	
	//флаги учета
	ОбъектПКО.ОтражатьВУправленческомУчете  = Истина;
	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ОбъектПКО, , "ОтражатьВНалоговомУчете", , Истина);
	
	//ответсвенный
	Если ОбъектПКО.Ответственный = Неопределено Или ОбъектПКО.Ответственный.Пустая() Тогда
		ОбъектПКО.Ответственный             = Объект.Ответственный;
	КонецЕсли;
	
	//касса
	Если ОбъектПКО.Касса = Неопределено Или ОбъектПКО.Касса.Пустая() Тогда
		ОбъектПКО.Касса                     = Касса; //деньги получаем в основную кассу магазина
	КонецЕсли;
	
	//номер
	Если НовыйПКО Тогда
		ОбъектПКО.УстановитьНовыйНомер(ОбъектПКО.Организация.Префикс);
	КонецЕсли;
	
	//подразделение
	Если Не ИскомоеПодразделение.Пустая() И Не ЗначениеЗаполнено(ОбъектПКО.Подразделение) Тогда
		ОбъектПКО.Подразделение = ИскомоеПодразделение;
	КонецЕсли;
	
	ОбъектПКО.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж                         = ОбъектПКО.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.КурсВзаиморасчетов      = 1;
	СтрокаПлатеж.КурсВзаиморасчетов      = 1;
	СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	СтрокаПлатеж.СуммаПлатежа            = СуммаНаличнымиПоДокументу;
	
	// определим как записывать документ
	Если Объект.Проведен Тогда
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		
	КонецЕсли;
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	ТипОбъектаПКО = ТипЗнч(ОбъектПКО);
	
	
	Попытка
		
		// записываем документ - проверяем наличие коллизий
		НаличиеКоллизии = ПроверитьНаличиеКоллизийИзмененийДляОбъекта(ОбъектПКО, ТипОбъектаПКО,, ПриоритетОбъектаОбмена);
		
		// проведение убираем всегда...
		ОтменитьПроведениеОбъектаВИБ(ОбъектПКО, ТипОбъектаПКО);
		
		Если НЕ ОбъектНайденПоКлючуВПриемнике Тогда
			ЗарегистрироватьСоответствиеОбъектовДляОбмена(Объект.Ссылка, СвойстваПоиска);
		КонецЕсли;
		
		ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, ОбъектПКО.Ссылка, ТипОбъекта);
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// если хотим провести документ помеченый на удаление, то пометку удаления снимаем ...
			//Если ОбъектПКО.ПометкаУдаления  Тогда
			//	
			//	ОбъектПКО.ПометкаУдаления = Ложь;
			//					
			//КонецЕсли;		
			
			НаборЗаписейРегистра = мМенеджерРегистраОтложенныеДвижения.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
			НаборЗаписейРегистра.Отбор.Документ.Установить(ОбъектПКО.Ссылка);
			
			СтрокаНабора = НаборЗаписейРегистра.Добавить();
			СтрокаНабора.УзелОбмена    = УзелОбменаЗагрузкаДанных;
			СтрокаНабора.Документ      = ОбъектПКО.Ссылка;
			СтрокаНабора.ДатаДокумента = ОбъектПКО.Дата;
			
			ЗаписатьОбъектВИБ(НаборЗаписейРегистра, "РегистрСведенийНаборЗаписей.ОтложенныеДвиженияДокументов");
			
		КонецЕсли;
		
		//пока не работает механизм запрета в УТ, нет смысла
		//запрещаем объект для редактирования
		НоваяСтрока        = Параметры.ТаблицаОбъектовЗапрещенныхДляРедактирования.Добавить();
		НоваяСтрока.Ссылка = ОбъектПКО.Ссылка;
		
	Исключение
		
		СтрокаОписанияОшибки = ОписаниеОшибки();
		
		// не смогли выполнить необходимые действия для документа
		ЗаписатьДокументВБезопасномРежиме(ОбъектПКО, ТипОбъектаПКО);
		
		
		ЗП        = ПолучитьСтруктуруЗаписиПротокола(25, СтрокаОписанияОшибки);
		ЗП.ИмяПКО = ИмяПравила;
		
		Если Не ПустаяСтрока(Источник) Тогда
			
			ЗП.Источник = Источник;
			
		КонецЕсли;
		
		ЗП.ТипОбъекта = ТипОбъектаПКО;
		ЗП.Объект     = Строка(ОбъектПКО);
		ЗаписатьВПротоколВыполнения(25, ЗП);
		
		// объект не смогли в нормальном режиме записать - надо об этом сообщить
		ВызватьИсключение "Ошибка при записи документа: " + Строка(ОбъектПКО) + Символы.ПС + СтрокаОписанияОшибки;
		
	КонецПопытки;
	
Иначе
	
	Если СсылкаНаДокументПКО.ПолучитьОбъект() <> Неопределено Тогда
		
		ОбъектПКО = СсылкаНаДокументПКО.ПолучитьОбъект();
		ТипОбъектаПКО = ТипЗнч(ОбъектПКО);
		ОтменитьПроведениеОбъектаВИБ(ОбъектПКО, ТипОбъектаПКО);
		ОбъектПКО.ПометкаУдаления = Истина;
		ЗаписатьОбъектВИБ(ОбъектПКО,ТипОбъектаПКО);
		
	КонецЕсли;
	
	
КонецЕсли;
